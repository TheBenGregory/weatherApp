{"version":3,"sources":["apiManager/apiManager.js","HomePage/HomePage.js","reportWebVitals.js","index.js"],"names":["api","HomePage","useState","weather","setWeather","query","setQuery","console","log","className","main","temp","type","placeHolder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","yearAbr","String","slice","dateBuilder","Date","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAAaA,EACJ,mCADIA,EAEH,0C,eCIGC,EAAW,WAEpB,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAwCY,OAFZC,QAAQC,IAAIL,GAGI,mCACA,qBAAKM,UACmB,oBAAhBN,EAAQO,KACRP,EAAQO,KAAKC,KAAO,GACjB,UACsC,kBAA5BR,EAAQA,QAAQ,GAAGO,KAC1B,SACI,KACI,KAPtB,SAQI,iCACI,qBAAKD,UAAU,YAAf,SACI,uBACAG,KAAK,OACLH,UAAU,YACVI,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAIT,EAASS,EAAEC,OAAOC,QACjCA,MAAOZ,EACPa,WAxDb,SAAAC,GACK,UAAZA,EAAIC,KACJC,MAAM,GAAD,OAAIrB,EAAJ,qBAAyBK,EAAzB,iCAAuDL,IAC3DsB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAM,OAAIrB,EAAWqB,MAC1BH,KAAKhB,EAAS,UAsD0B,oBAAhBH,EAAQO,KACrB,gCACI,sBAAKD,UAAU,cAAf,UACI,sBAAKA,UAAU,WAAf,UAA2BN,EAAQuB,KAAnC,KAA2CvB,EAAQwB,IAAIC,WACvD,qBAAKnB,UAAU,OAAf,SAxCR,SAACoB,GACjB,IAGIC,EAFM,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,UAEpDD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cACTC,EAAUC,OAAOH,GAAMI,MAAM,EAAE,GACnC,MAAM,GAAN,OAAUV,EAAV,YAAiBI,EAAjB,YAA0BF,EAA1B,aAAmCM,EAAnC,KA+B+CG,CAAY,IAAIC,WAE3C,sBAAKjC,UAAU,aAAf,UACI,sBAAKA,UAAU,OAAf,UACKkC,KAAKC,MAAMzC,EAAQO,KAAKC,MAD7B,YAGI,qBAAKF,UAAU,UAAf,SAA0BN,EAAQA,QAAQ,GAAGO,aAG5D,WCvENmC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCGdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.202e13b5.chunk.js","sourcesContent":["export const api = {\n    key: \"e1d40a2013e49267140f997eab3df080\",\n    base: \"http://pro.openweathermap.org/data/2.5/\"\n}","import React, { useState, useEffect } from \"react\";\nimport { api } from \"../apiManager/apiManager\";\nimport \"./HomePage.css\"\nimport \"../index.css\"\n\n\nexport const HomePage = () => {\n    \n    const [weather, setWeather] = useState([])\n    const [query, setQuery] = useState([])\n\n    const search = evt => {\n        if (evt.key === \"Enter\") {\n            fetch(`${api.base}weather?q=${query}&units=imperial&appid=${api.key}`)\n            .then(res => res.json())\n            .then(result => setWeather(result))\n            .then(setQuery(''))\n            \n        }\n        }\n\n    // useEffect(\n    //     () => {\n    //         getWeather()\n    //             .then(\n    //                 (weatherArray) => {\n    //                     setWeather(weatherArray)\n    //                 }\n    //             )\n    //     },\n    //     []\n    // )\n\n\n    const dateBuilder = (d) => {\n        let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ]\n        let days =[\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n\n        let day = days[d.getDay()];\n        let date = d.getDate();\n        let month = months[d.getMonth()];\n        let year = d.getFullYear()\n        let yearAbr = String(year).slice(2,4)\n        return `${day} ${month} ${date} '${yearAbr} `\n    }\n\n\n    console.log(weather)\n    \n                return (\n                    <>\n                    <div className={\n                    (typeof weather.main != \"undefined\") \n                        ? ((weather.main.temp < 50) \n                             ? \"wx cold\" \n                               : (typeof weather.weather[0].main === \"Clouds\") \n                                ? 'clouds' \n                                    : \"wx\") \n                                        : 'wx'}>\n                        <main>\n                            <div className=\"searchBox\">\n                                <input\n                                type=\"text\"\n                                className=\"searchBar\"\n                                placeHolder=\"Search...\"\n                                onChange={e => setQuery(e.target.value)}\n                                value={query}\n                                onKeyPress={search}\n                                />\n                            </div>\n                            {(typeof weather.main != 'undefined') ? (\n                        <div>\n                            <div className=\"locationBox\">\n                                <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n                                <div className=\"date\">{dateBuilder(new Date())}</div>\n                            </div>\n                            <div className=\"weatherBox\">\n                                <div className=\"temp\">\n                                    {Math.round(weather.main.temp)} Â°f\n                                    </div>\n                                    <div className=\"weather\">{weather.weather[0].main}</div>\n                                </div>\n                        </div>\n                ) : ('')}\n                \n                        </main>\n                    </div>\n                    \n                    \n                    </>\n                )        \n        }\n       \n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { WeatherApp } from './WeatherApp.js';\nimport reportWebVitals from './reportWebVitals';\nimport { HomePage } from './HomePage/HomePage';\n\n\n// import { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HomePage />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}